generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  INITIAL
  PENDING
  COMPLETED
  CANCELED
  SHIPPED
  PAID
  FAILED
}

enum PaymentStatus {
  INITIAL
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  INITIAL
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  parentId    Int?
  parent      Category?  @relation("CategoryChildren", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryChildren")
  products    Product[]  @relation("ProductCategories")
}

model Attributes {
  id       Int          @id @default(autoincrement())
  name     String
  parentId Int?
  parent   Attributes?  @relation("Attributes", fields: [parentId], references: [id])
  children Attributes[] @relation("Attributes")
  variants Variant[]    @relation("VariantAttributes")
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  productCode String     @unique @default(cuid())
  description String?
  brand       String?
  variants    Variant[]
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  categories  Category[] @relation("ProductCategories")
}

model Variant {
  id           Int          @id @default(autoincrement())
  sku          String       @unique
  price        Float
  quantity     Int
  productId    Int
  product      Product      @relation(fields: [productId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime?    @updatedAt
  attributes   Attributes[] @relation("VariantAttributes")
  stockBatches StockBatch[]
}

model StockBatch {
  id        Int      @id @default(autoincrement())
  quantity  Int
  variantId Int
  cost      Float
  variant   Variant  @relation(fields: [variantId], references: [id])
  createdAt DateTime @default(now())
}

model Order {
  id         Int         @id @default(autoincrement())
  customerId Int?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  status     OrderStatus @default(PENDING)
  discountId Int?
  chargeId   Int?
  charge     Charges?    @relation(fields: [chargeId], references: [id])
  discount   Discount?   @relation(fields: [discountId], references: [id])
  Customer   Customer?   @relation(fields: [customerId], references: [id])

  paymentAmount Float
  paidAmount    Float
  payableAmount Float

  paymentStatus PaymentStatus @default(INITIAL)
  paymentMethod PaymentMethod @default(INITIAL)

  items OrderItem[]
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  variantId Int
  quantity  Int
  price     Float

  orderId Int
  order   Order @relation(fields: [orderId], references: [id])
}

model Discount {
  id          Int     @id @default(autoincrement())
  description String?
  amount      Float
  Order       Order[]
}

model Charges {
  id          Int     @id @default(autoincrement())
  description String?
  amount      Float
  Order       Order[]
}

model Customer {
  id        Int       @id @default(autoincrement())
  Name      String
  email     String?   @unique
  phone     String?
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  orders    Order[]
}
